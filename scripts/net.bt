#!/usr/bin/env bpftrace
#include <linux/socket.h>
#include <net/sock.h>

// bpftrace -lv tracepoint:syscalls:sys_enter_socket
//    int __syscall_nr
//    int family
//    int type
//    int protocol
tracepoint:syscalls:sys_enter_socket
/comm!="vmtoolsd" && comm!="sudo"/
{
    printf("[socket] pid=%d comm=%s type=%d protocol=%d\n",
        pid, comm, args->type, args->protocol);
}


// bpftrace -lv tracepoint:syscalls:sys_enter_bind
//    int __syscall_nr
//    int fd
//    struct sockaddr * umyaddr
//    int addrlen
tracepoint:syscalls:sys_enter_bind
/comm!="vmtoolsd" && comm!="sudo"/
{
    printf("[bind] pid=%d comm=%s sockfd=%d\n",pid, comm, args->fd);
}
// bpftrace -lv tracepoint:syscalls:sys_enter_listen
tracepoint:syscalls:sys_enter_listen
/comm!="vmtoolsd" && comm!="sudo"/
{

}


// bpftrace -lv tracepoint:syscalls:sys_enter_accept
//    int __syscall_nr
//    int fd
//    struct sockaddr * upeer_sockaddr
//    int * upeer_addrlen
tracepoint:syscalls:sys_enter_accept
/comm!="vmtoolsd" && comm!="sudo"/
{
    printf("[accept] pid=%d comm=%s sockfd=%d\n",
        pid, comm, args->fd);
}

// bpftrace -lv tracepoint:syscalls:sys_enter_connect
//    int __syscall_nr
//    int fd
//    struct sockaddr * uservaddr
//    int addrlen
tracepoint:syscalls:sys_enter_connect
/comm!="vmtoolsd" && comm!="sudo"/
{
    printf("[connect] pid=%d comm=%s sockfd=%d\n",
        pid, comm, args->fd);
}

// bpftrace -lv tracepoint:syscalls:sys_enter_epoll_create
tracepoint:syscalls:sys_enter_epoll_create
/comm!="vmtoolsd" && comm!="sudo"/
{
    printf("[epoll_create] pid=%d comm=%s size=%d\n",
        pid, comm, args->size);
}

kprobe:tcp_connect
{
    @tcp_states[1] = "ESTABLISHED";
    @tcp_states[2] = "SYN_SENT";
    @tcp_states[3] = "SYN_RECV";
    @tcp_states[4] = "FIN_WAIT1";
    @tcp_states[5] = "FIN_WAIT2";
    @tcp_states[6] = "TIME_WAIT";
    @tcp_states[7] = "CLOSE";
    @tcp_states[8] = "CLOSE_WAIT";
    @tcp_states[9] = "LAST_ACK";
    @tcp_states[10] = "LISTEN";
    @tcp_states[11] = "CLOSING";
    @tcp_states[12] = "NEW_SYN_RECV";
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;
  if ($inet_family == AF_INET || $inet_family == AF_INET6) {
    if ($inet_family == AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;
    // Destination port is big endian, it must be flipped
    $dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);
    $state = $sk->__sk_common.skc_state;
    $statestr = @tcp_states[$state];
    printf("[tcp_connect] pid:%d comm:%s ", pid, comm);
    printf("saddr:%s lport:%d daddr:%s dport:%d state:%s\n", $saddr, $lport, $daddr, $dport,$statestr);
  }
}
