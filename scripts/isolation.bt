#!/usr/bin/bpftrace
// bpftrace -lv tracepoint:syscalls:sys_enter_clone
//    int __syscall_nr
//    unsigned long clone_flags
//    unsigned long newsp
//    int * parent_tidptr
//    int * child_tidptr
//    unsigned long tls
tracepoint:syscalls:sys_enter_clone
{ printf("[clone] pid=%d comm=%s flags=%x parent=%d,child=%d\n"
,pid,comm, args->clone_flags,*args->parent_tidptr,*args->child_tidptr); }

// bpftrace -lv tracepoint:syscalls:sys_enter_unshare
//    int __syscall_nr
//    unsigned long unshare_flags
tracepoint:syscalls:sys_enter_unshare
{ printf("[unshare] flags=%x\n", args->unshare_flags); }

// bpftrace -lv tracepoint:syscalls:sys_enter_setns
//    int __syscall_nr
//    int fd
//    int flags
tracepoint:syscalls:sys_enter_setns
{ printf("[setns] fd=%d, nstype=%x\n", args->fd, args->flags); }

tracepoint:syscalls:sys_enter_seccomp
/*
    int __syscall_nr
    unsigned int op
    unsigned int flags
    void * uargs
*/
{ printf("[seccomp] op=%d, flags=%x\n", args->op, args->flags); }

// bpftrace -lv tracepoint:syscalls:sys_enter_prctl
//    int __syscall_nr
//    int option
//    unsigned long arg2
//    unsigned long arg3
//    unsigned long arg4
//    unsigned long arg5
tracepoint:syscalls:sys_enter_prctl {
$opt=args->option;
printf("[prctl]comm=%s option=%d\n",comm,$opt);
}

// bpftrace -lv tracepoint:cgroup:cgroup_attach_task
/*
tracepoint:cgroup:cgroup_attach_task
    int dst_root
    int dst_level
    u64 dst_id
    int pid
    __data_loc char[] dst_path
    __data_loc char[] comm
*/
tracepoint:cgroup:cgroup_attach_task
{ printf("[cgroup_attach_task] comm=%s, cgroup_path=%s\n", comm,str(args->dst_path)); }
kprobe:cgroup_create
{ printf("[cgroup_create]pid=%d,comm=%s",pid,comm); }


